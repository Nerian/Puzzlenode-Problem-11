require 'spec_helper'

describe WaterFlow do   
  let(:simple_cave) do
    "################################\n"+
    "~                              #\n"+
    "#         ####                 #\n"+
    "###       ####                ##\n"+
    "###       ####              ####\n"+
    "#######   #######         ######\n"+
    "#######   ###########     ######\n"+
    "################################\n"
  end 
  
  describe "# Creates a new water_flow parser" do 
    before(:each) { @water_flow = WaterFlow.new(:water => 50, :cave => simple_cave)  }
    
    it "Should have a number of water units" do
      assert { @water_flow.water == 50 }      
    end
    
    it "Should parse the cave file" do    
      assert { @water_flow.cave == 
        [
        	['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
        	['~',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'],
        	['#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'],
        	['#','#','#',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#'],
        	['#','#','#',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#'],
        	['#','#','#','#','#','#','#',' ',' ',' ','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#'],
        	['#','#','#','#','#','#','#',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#',' ',' ',' ',' ',' ','#','#','#','#','#','#'],
        	['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']
        ]}      
    end   
    
    it "Should be able to know the starting position" do      
      x, y = @water_flow.find_starting_position
      assert { x == 0 and y == 1 }
    end 
  end
  
  describe "# Simulate Water Flow" do
    before(:each) { @water_flow = WaterFlow.new(:water => 50, :cave => simple_cave)  }                                 
    
    it "If it cannot go down, but can go to the right, then it goes right" do
      @water_flow.water = 2
      simulation = @water_flow.simulate_flow   
      simulation[0].should == ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']
      simulation[1].should == ['~','~',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#']
      simulation[2].should == ['#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#']
      simulation[3].should == ['#','#','#',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#']
      simulation[4].should == ['#','#','#',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#']
      simulation[5].should == ['#','#','#','#','#','#','#',' ',' ',' ','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#']   
      simulation[6].should == ['#','#','#','#','#','#','#',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#',' ',' ',' ',' ',' ','#','#','#','#','#','#'] 
      simulation[7].should == ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']

 
    end              
    
    it "If it can flow down, it flows down" do    
      @water_flow.water = 3
      simulation = @water_flow.simulate_flow        
      simulation[0].should == ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']
      simulation[1].should == ['~','~',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#']
      simulation[2].should == ['#','~',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#']
      simulation[3].should == ['#','#','#',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#']
      simulation[4].should == ['#','#','#',' ',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#']
      simulation[5].should == ['#','#','#','#','#','#','#',' ',' ',' ','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#']   
      simulation[6].should == ['#','#','#','#','#','#','#',' ',' ',' ','#','#','#','#','#','#','#','#','#','#','#',' ',' ',' ',' ',' ','#','#','#','#','#','#']  
      simulation[7].should == ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']     
    end      
    
    it "It always flow from the left to the right" do    
      @water_flow.water = 16
      simulation = @water_flow.simulate_flow        
      simulation[0].should == ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']
      simulation[1].should == ['~','~',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#']
      simulation[2].should == ['#','~','~','~',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#']
      simulation[3].should == ['#','#','#','~',' ',' ',' ',' ',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#']
      simulation[4].should == ['#','#','#','~','~','~','~','~',' ',' ','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#']
      simulation[5].should == ['#','#','#','#','#','#','#','~','~',' ','#','#','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#','#']   
      simulation[6].should == ['#','#','#','#','#','#','#','~','~','~','#','#','#','#','#','#','#','#','#','#','#',' ',' ',' ',' ',' ','#','#','#','#','#','#']  
      simulation[7].should == ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']     
    end
    
  end 
  
  describe "Water values" do        
    before(:each) { @water_flow = WaterFlow.new(:water => 50, :cave => simple_cave)  }
    
    it "Should return water values" do           
      @water_flow.water = 11
      @water_flow.simulate_flow
      measures = @water_flow.measures
      assert { measures == '1 2 1 3 1 1 1 ~ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0' }
    end
    
  end
end   